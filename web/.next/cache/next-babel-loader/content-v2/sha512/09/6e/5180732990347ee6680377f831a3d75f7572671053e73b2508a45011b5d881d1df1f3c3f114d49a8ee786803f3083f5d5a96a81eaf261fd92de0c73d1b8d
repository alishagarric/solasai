{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx\",\n    _this3 = this,\n    _s = $RefreshSig$();\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React, { useContext } from \"react\";\nimport { DefaultTheme } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemeChangerWithHook = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemeChangerWithHook, _React$PureComponent);\n\n  var _super = _createSuper(ThemeChangerWithHook);\n\n  function ThemeChangerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeChangerWithHook);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      }\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n       let nextBodyElement = document.getElementById(\"__next\");\n       if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n       // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n     //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n\n  _createClass(ThemeChangerWithHook, [{\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      var setTheme = this.props.setTheme;\n      this.setState({\n        activeTheme: theme\n      });\n\n      if (\"object\") {\n        window.laxaltUniversalTheme = theme;\n        var nextBodyElement = document.getElementById(\"__next\");\n\n        if (nextBodyElement) {\n          nextBodyElement.setAttribute(\"data-theme\", theme.name);\n        }\n      }\n\n      setTheme(theme);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme;\n      var activeTheme = this.state.activeTheme; // const SetGlobalTheme = createGlobalStyle`\n      //   ${\n      //     activeTheme\n      //       ? CssUtils.CreateTheme(\n      //           activeTheme.primary,\n      //           activeTheme.secondary,\n      //           activeTheme.background,\n      //           activeTheme.foreground\n      //         )\n      //       : \"\"\n      //   }\n      // `;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ThemeChangerStyle, {\n          onMouseOver: function onMouseOver() {\n            return _this2.setNewTheme(theme);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.setNewTheme(DefaultTheme);\n          },\n          className: \"\"\n          /*`${ThemeChangerClassName}`*/\n          ,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    }\n  }]);\n\n  return ThemeChangerWithHook;\n}(React.PureComponent);\nexport var ThemeChanger = function ThemeChanger(_ref) {\n  _s();\n\n  var theme = _ref.theme,\n      children = _ref.children;\n\n  var _useContext = useContext(ColorContext),\n      setTheme = _useContext.setTheme;\n\n  return /*#__PURE__*/_jsxDEV(ThemeChangerWithHook, {\n    theme: theme,\n    setTheme: setTheme,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, _this3);\n};\n\n_s(ThemeChanger, \"y+xtM1OefnlNuVcGnZR7qTH5k/E=\");\n\n_c = ThemeChanger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeChanger\");","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx"],"names":["React","useContext","DefaultTheme","ColorContext","Theme","ThemeChangerStyle","ThemeChangerWithHook","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","setNewTheme","bind","theme","setTheme","setState","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","children","PureComponent","ThemeChanger"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,YAAT,QAAsE,+BAAtE,C,CACA;;AACA,SAASC,YAAT,QAA8C,8BAA9C;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAAgCC,iBAAhC,QAAyD,eAAzD;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAaC,oBAAb;AAAA;;AAAA;;AAIE,gCAAYC,KAAZ,EAAsC;AAAA;;AAAA;;AACpC,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,SADK;AAEXC,QAAAA,OAAO,EAAEP,KAAK,CAACQ,KAAN,CAAYC,OAFV;AAGXC,QAAAA,SAAS,EAAEV,KAAK,CAACQ,KAAN,CAAYG,SAHZ;AAIXC,QAAAA,UAAU,EAAEZ,KAAK,CAACQ,KAAN,CAAYK,UAJb;AAKXC,QAAAA,UAAU,EAAEd,KAAK,CAACQ,KAAN,CAAYO;AALb;AADF,KAAb;AAUA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AAboC;AAcrC;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApCA;AAAA;AAAA,gCA0CcC,KA1Cd,EA0CsC;AAAA,UAC1BC,QAD0B,GACb,KAAKhB,KADQ,CAC1BgB,QAD0B;AAGlC,WAAKC,QAAL,CAAc;AACZf,QAAAA,WAAW,EAAEa;AADD,OAAd;;AAIA,oBAAmB;AACjBG,QAAAA,MAAM,CAACC,oBAAP,GAA8BJ,KAA9B;AAEA,YAAIK,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAtB;;AAEA,YAAIF,eAAJ,EAAqB;AACnBA,UAAAA,eAAe,CAACG,YAAhB,CAA6B,YAA7B,EAA2CR,KAAK,CAACZ,IAAjD;AACD;AACF;;AAEDa,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AA5DH;AAAA;AAAA,6BA8DW;AAAA;;AAAA,wBACmB,KAAKf,KADxB;AAAA,UACDwB,QADC,eACDA,QADC;AAAA,UACST,KADT,eACSA,KADT;AAAA,UAEDb,WAFC,GAEiB,KAAKD,KAFtB,CAEDC,WAFC,EAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BACE;AAAA,+BAIE,QAAC,iBAAD;AACE,UAAA,WAAW,EAAE;AAAA,mBAAM,MAAI,CAACW,WAAL,CAAiBE,KAAjB,CAAN;AAAA,WADf;AAEE,UAAA,YAAY,EAAE;AAAA,mBAAM,MAAI,CAACF,WAAL,CAAiBlB,YAAjB,CAAN;AAAA,WAFhB;AAGE,UAAA,SAAS,EAAE;AAAE;AAHf;AAAA,oBAKG6B;AALH;AAAA;AAAA;AAAA;AAAA;AAJF,uBADF;AA2BD;AA1GH;;AAAA;AAAA,EAA0C/B,KAAK,CAACgC,aAAhD;AA6GA,OAAO,IAAMC,YAA+D,GAAG,SAAlEA,YAAkE,OAAuB;AAAA;;AAAA,MAArBX,KAAqB,QAArBA,KAAqB;AAAA,MAAdS,QAAc,QAAdA,QAAc;;AAAA,oBAC/E9B,UAAU,CAACE,YAAD,CADqE;AAAA,MAC5FoB,QAD4F,eAC5FA,QAD4F;;AAGpG,sBAAO,QAAC,oBAAD;AAAsB,IAAA,KAAK,EAAED,KAA7B;AAAoC,IAAA,QAAQ,EAAEC,QAA9C;AAAA,cAAyDQ;AAAzD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,CAJM;;GAAME,Y;;KAAAA,Y","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { DefaultTheme, LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerClassName, ThemeChangerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemeChanger = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n  theme: LXLT_ColorTheme;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemeChangerState = {\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemeChangerWithHook extends React.PureComponent<\n  LXLT_ThemeChanger,\n  LXLT_ThemeChangerState\n> {\n  constructor(props: LXLT_ThemeChanger) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { children, theme } = this.props;\n    let { activeTheme,  } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemeChangerStyle \n          onMouseOver={() => this.setNewTheme(theme)} \n          onMouseLeave={() => this.setNewTheme(DefaultTheme)} \n          className={\"\"/*`${ThemeChangerClassName}`*/}\n        >\n          {children}\n\n          {/*<div\n            className={`${ThemeChangerClassName}__option ${ThemeChangerClassName}__option--${\n              volume.theme.name === activeTheme.name\n                ? \"active\"\n                : \"inactive\"\n            }`}\n            style={{\n              backgroundColor: volume.theme.background,\n              border: `1px solid ${volume.theme.foreground}`,\n            }}\n          ></div>*/}\n        </ThemeChangerStyle>\n      </>\n      \n    );\n  }\n}\n\nexport const ThemeChanger: React.FunctionComponent<{theme: LXLT_ColorTheme}> = ({theme, children}) => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemeChangerWithHook theme={theme} setTheme={setTheme}>{children}</ThemeChangerWithHook>;\n};\n"]},"metadata":{},"sourceType":"module"}