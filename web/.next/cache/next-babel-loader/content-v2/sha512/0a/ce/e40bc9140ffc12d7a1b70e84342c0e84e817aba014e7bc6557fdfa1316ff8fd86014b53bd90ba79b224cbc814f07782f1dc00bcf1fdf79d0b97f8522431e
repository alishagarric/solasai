{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx\",\n    _this3 = this,\n    _s = $RefreshSig$();\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React, { useContext } from \"react\";\nimport { SiteVolumes } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemePickerWithHook = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemePickerWithHook, _React$PureComponent);\n\n  var _super = _createSuper(ThemePickerWithHook);\n\n  function ThemePickerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemePickerWithHook);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Primary\n      }]\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ThemePickerWithHook, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (\"object\") {\n        window.laxaltUniversalTheme = this.state.activeTheme;\n        var nextBodyElement = document.getElementById(\"__next\");\n\n        if (nextBodyElement) {\n          nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n        } // _________________________\n        // Change if dark mode detected\n\n\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n          this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n        } //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n\n      }\n    }\n  }, {\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      var setTheme = this.props.setTheme;\n      this.setState({\n        activeTheme: theme\n      });\n\n      if (\"object\") {\n        window.laxaltUniversalTheme = theme;\n        var nextBodyElement = document.getElementById(\"__next\");\n\n        if (nextBodyElement) {\n          nextBodyElement.setAttribute(\"data-theme\", theme.name);\n        }\n      }\n\n      setTheme(theme);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          activeTheme = _this$state.activeTheme,\n          availableThemes = _this$state.availableThemes; // const SetGlobalTheme = createGlobalStyle`\n      //   ${\n      //     activeTheme\n      //       ? CssUtils.CreateTheme(\n      //           activeTheme.primary,\n      //           activeTheme.secondary,\n      //           activeTheme.background,\n      //           activeTheme.foreground\n      //         )\n      //       : \"\"\n      //   }\n      // `;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ThemePickerStyle, {\n          className: \"\".concat(ThemePickerClassName),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\".concat(ThemePickerClassName, \"__label\"),\n            children: \"Change Theme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this), SiteVolumes && SiteVolumes.length > 0 && SiteVolumes.map(function (volume, idx) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\".concat(ThemePickerClassName, \"__option \").concat(ThemePickerClassName, \"__option--\").concat(volume.theme.name === activeTheme.name ? \"active\" : \"inactive\"),\n              onClick: function onClick() {\n                return _this2.setNewTheme(volume.theme);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"\".concat(ThemePickerClassName, \"__option__el \").concat(ThemePickerClassName, \"__option__el--primary\"),\n                style: {\n                  backgroundColor: volume.theme.background,\n                  border: \"1px solid \".concat(volume.theme.foreground)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, _this2), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"\".concat(ThemePickerClassName, \"__option__el \").concat(ThemePickerClassName, \"__option__el--secondary\"),\n                style: {\n                  backgroundColor: volume.theme.foreground\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, _this2)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, _this2);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    }\n  }]);\n\n  return ThemePickerWithHook;\n}(React.PureComponent);\nexport var ThemePicker = function ThemePicker() {\n  _s();\n\n  var _useContext = useContext(ColorContext),\n      setTheme = _useContext.setTheme;\n\n  return /*#__PURE__*/_jsxDEV(ThemePickerWithHook, {\n    setTheme: setTheme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 10\n  }, _this3);\n};\n\n_s(ThemePicker, \"y+xtM1OefnlNuVcGnZR7qTH5k/E=\");\n\n_c = ThemePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemePicker\");","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","useContext","SiteVolumes","ColorContext","Theme","ThemePickerClassName","ThemePickerStyle","ThemePickerWithHook","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","availableThemes","setNewTheme","bind","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","matchMedia","matches","theme","setTheme","setState","length","map","volume","idx","backgroundColor","border","PureComponent","ThemePicker"],"mappings":"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","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_ColorTheme[];\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Primary,\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n\n          <div className={`${ThemePickerClassName}__label`}>\n            Change Theme\n          </div>\n\n          {SiteVolumes && SiteVolumes.length > 0 &&\n            SiteVolumes.map((volume, idx: number) => {\n              return (\n                <div\n                  className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${\n                    volume.theme.name === activeTheme.name\n                      ? \"active\"\n                      : \"inactive\"\n                  }`}\n                  onClick={() => this.setNewTheme(volume.theme)}\n                  key={idx}\n                >\n                  <span\n                    className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`}\n                    style={{\n                      backgroundColor: volume.theme.background,\n                      border: `1px solid ${volume.theme.foreground}`,\n                    }}\n                  />\n                  <span\n                    className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`}\n                    style={{ backgroundColor: volume.theme.foreground }}\n                  />\n                </div>\n              );\n            })\n          }\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n\nexport const ThemePicker: React.FunctionComponent = () => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemePickerWithHook setTheme={setTheme} />;\n};\n"]},"metadata":{},"sourceType":"module"}