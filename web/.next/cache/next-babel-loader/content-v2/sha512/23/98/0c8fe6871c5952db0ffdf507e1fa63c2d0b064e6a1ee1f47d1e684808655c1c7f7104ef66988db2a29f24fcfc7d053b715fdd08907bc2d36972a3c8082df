{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx\";\n// Core\nimport React from \"react\";\nimport { DefaultTheme } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorUtils } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemeChangerWithHook extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      }\n    };\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n       let nextBodyElement = document.getElementById(\"__next\");\n       if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n       // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n     //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n\n  setNewTheme(theme) {\n    const {\n      setTheme\n    } = this.props;\n    this.setState({\n      activeTheme: theme\n    });\n\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = theme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    const SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n    setTheme(theme);\n  }\n\n  render() {\n    let {\n      children,\n      theme\n    } = this.props;\n    let {\n      activeTheme\n    } = this.state; // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ThemeChangerStyle, {\n        onMouseOver: () => this.setNewTheme(theme),\n        onMouseLeave: () => this.setNewTheme(DefaultTheme),\n        className: \"\"\n        /*`${ThemeChangerClassName}`*/\n        ,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport const ThemeChanger = ({\n  theme,\n  children\n}) => {\n  const HoverTheme = ColorUtils.SetThemeFromServer(theme);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HoverTheme, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this), children]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx"],"names":["React","DefaultTheme","ColorUtils","Theme","ThemeChangerStyle","ThemeChangerWithHook","PureComponent","constructor","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","setNewTheme","bind","theme","setTheme","setState","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","SecondTheme","SetThemeFromServer","OysterTheme","render","children","ThemeChanger","HoverTheme"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,SAASC,YAAT,QAAsE,+BAAtE,C,CACA;;AACA,SAAuBC,UAAvB,QAA0D,8BAA1D;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAAgCC,iBAAhC,QAAyD,eAAzD;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAN,SAAmCL,KAAK,CAACM,aAAzC,CAGL;AACAC,EAAAA,WAAW,CAACC,KAAD,EAA2B;AACpC,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,SADK;AAEXC,QAAAA,OAAO,EAAET,KAAK,CAACU,KAAN,CAAYC,OAFV;AAGXC,QAAAA,SAAS,EAAEZ,KAAK,CAACU,KAAN,CAAYG,SAHZ;AAIXC,QAAAA,UAAU,EAAEd,KAAK,CAACU,KAAN,CAAYK,UAJb;AAKXC,QAAAA,UAAU,EAAEhB,KAAK,CAACU,KAAN,CAAYO;AALb;AADF,KAAb;AAUA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMED,EAAAA,WAAW,CAACE,KAAD,EAAyB;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKhB,KAA1B;AAEA,SAAKiB,QAAL,CAAc;AACZf,MAAAA,WAAW,EAAEa;AADD,KAAd;;AAIA,qBAAmB;AACjBG,MAAAA,MAAM,CAACC,oBAAP,GAA8BJ,KAA9B;AAEA,UAAIK,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAtB;;AAEA,UAAIF,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACG,YAAhB,CAA6B,YAA7B,EAA2CR,KAAK,CAACZ,IAAjD;AACD;AACF;;AAED,UAAMqB,WAAW,GAAG9B,UAAU,CAAC+B,kBAAX,CAA8BC,WAA9B,CAApB;AAEAV,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA,QAAF;AAAYb,MAAAA;AAAZ,QAAsB,KAAKf,KAA/B;AACA,QAAI;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA7B,CAFO,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBACE;AAAA,6BAIE,QAAC,iBAAD;AACE,QAAA,WAAW,EAAE,MAAM,KAAKY,WAAL,CAAiBE,KAAjB,CADrB;AAEE,QAAA,YAAY,EAAE,MAAM,KAAKF,WAAL,CAAiBpB,YAAjB,CAFtB;AAGE,QAAA,SAAS,EAAE;AAAE;AAHf;AAAA,kBAKGmC;AALH;AAAA;AAAA;AAAA;AAAA;AAJF,qBADF;AA2BD;;AAzGD;AA4GF,OAAO,MAAMC,YAA+D,GAAG,CAAC;AAACd,EAAAA,KAAD;AAAQa,EAAAA;AAAR,CAAD,KAAuB;AACpG,QAAME,UAAU,GAAGpC,UAAU,CAAC+B,kBAAX,CAA8BV,KAA9B,CAAnB;AAEA,sBACE;AAAA,4BACA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADA,EAECa,QAFD;AAAA,kBADF;AAMD,CATM","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { DefaultTheme, LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, ColorUtils, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerClassName, ThemeChangerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemeChanger = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n  theme: LXLT_ColorTheme;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemeChangerState = {\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemeChangerWithHook extends React.PureComponent<\n  LXLT_ThemeChanger,\n  LXLT_ThemeChangerState\n> {\n  constructor(props: LXLT_ThemeChanger) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    const SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { children, theme } = this.props;\n    let { activeTheme,  } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemeChangerStyle \n          onMouseOver={() => this.setNewTheme(theme)} \n          onMouseLeave={() => this.setNewTheme(DefaultTheme)} \n          className={\"\"/*`${ThemeChangerClassName}`*/}\n        >\n          {children}\n\n          {/*<div\n            className={`${ThemeChangerClassName}__option ${ThemeChangerClassName}__option--${\n              volume.theme.name === activeTheme.name\n                ? \"active\"\n                : \"inactive\"\n            }`}\n            style={{\n              backgroundColor: volume.theme.background,\n              border: `1px solid ${volume.theme.foreground}`,\n            }}\n          ></div>*/}\n        </ThemeChangerStyle>\n      </>\n      \n    );\n  }\n}\n\nexport const ThemeChanger: React.FunctionComponent<{theme: LXLT_ColorTheme}> = ({theme, children}) => {\n  const HoverTheme = ColorUtils.SetThemeFromServer(theme);\n\n  return (\n    <>\n    <HoverTheme />\n    {children}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}