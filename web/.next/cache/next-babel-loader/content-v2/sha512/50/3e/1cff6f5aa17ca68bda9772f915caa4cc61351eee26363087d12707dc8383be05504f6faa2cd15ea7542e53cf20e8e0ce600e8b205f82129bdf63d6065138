{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx\";\n// Core\nimport React, { useContext } from \"react\";\nimport { SiteVolumes } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Primary\n      }]\n    };\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      } // _________________________\n      // Change if dark mode detected\n\n\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      } //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n\n    }\n  }\n\n  setNewTheme(theme) {\n    const {\n      setTheme\n    } = this.props;\n    this.setState({\n      activeTheme: theme\n    });\n\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = theme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let {\n      activeTheme,\n      availableThemes\n    } = this.state; // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ThemePickerStyle, {\n        className: `${ThemePickerClassName}`,\n        children: SiteVolumes && SiteVolumes.length > 0 && SiteVolumes.map((volume, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${ThemePickerClassName}__option ${ThemePickerClassName}__option--${volume.theme.name === activeTheme.name ? \"active\" : \"inactive\"}`,\n            onClick: () => this.setNewTheme(volume.theme),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`,\n              style: {\n                backgroundColor: volume.theme.background,\n                border: `1px solid ${volume.theme.foreground}`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`,\n              style: {\n                backgroundColor: volume.theme.foreground\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport const ThemePicker = () => {\n  const {\n    setTheme\n  } = useContext(ColorContext);\n  return /*#__PURE__*/_jsxDEV(ThemePickerWithHook, {\n    setTheme: setTheme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx"],"names":["React","useContext","SiteVolumes","ColorContext","Theme","ThemePickerClassName","ThemePickerStyle","ThemePickerWithHook","PureComponent","constructor","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","availableThemes","setNewTheme","bind","componentDidMount","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","matchMedia","matches","theme","setTheme","setState","render","length","map","volume","idx","backgroundColor","border","ThemePicker"],"mappings":"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","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_ColorTheme[];\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Primary,\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemePickerStyle className={`${ThemePickerClassName}`}>\n          \n          {SiteVolumes && SiteVolumes.length > 0 &&\n            SiteVolumes.map((volume, idx: number) => {\n              return (\n                <div\n                  className={`${ThemePickerClassName}__option ${ThemePickerClassName}__option--${\n                    volume.theme.name === activeTheme.name\n                      ? \"active\"\n                      : \"inactive\"\n                  }`}\n                  onClick={() => this.setNewTheme(volume.theme)}\n                  key={idx}\n                >\n                  <span\n                    className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--primary`}\n                    style={{\n                      backgroundColor: volume.theme.background,\n                      border: `1px solid ${volume.theme.foreground}`,\n                    }}\n                  />\n                  <span\n                    className={`${ThemePickerClassName}__option__el ${ThemePickerClassName}__option__el--secondary`}\n                    style={{ backgroundColor: volume.theme.foreground }}\n                  />\n                </div>\n              );\n            })\n          }\n        </ThemePickerStyle>\n      </>\n      \n    );\n  }\n}\n\nexport const ThemePicker: React.FunctionComponent = () => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemePickerWithHook setTheme={setTheme} />;\n};\n"]},"metadata":{},"sourceType":"module"}