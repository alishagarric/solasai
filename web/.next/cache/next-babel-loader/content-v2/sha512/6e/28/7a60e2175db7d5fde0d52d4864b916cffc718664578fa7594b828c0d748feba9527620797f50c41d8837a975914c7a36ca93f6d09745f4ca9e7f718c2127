{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Color.js:\n// This is the sitewide palette.\n// Imports\n// _______________________________________________________\nimport { createGlobalStyle } from \"styled-components\"; // Begin Component\n// _______________________________________________________\n\nexport const Color = {\n  // Color Variables\n  varPrimary: \"var(--clrPrimary)\",\n  varSecondary: \"var(--clrSecondary)\",\n  varBackground: \"var(--clrBackground)\",\n  varForeground: \"var(--clrForeground)\",\n  // Core Colors\n  Primary: \"#112635\",\n  Secondary: \"#D41D00\",\n  Background: \"#F7F7F7\",\n  Text: \"#112635\",\n  //Red Colors\n  Red1: \"#D41D00\",\n  Red2: \"#D50000\",\n  Red3: \"#C30000\",\n  Red4: \"#960202\",\n  Red5: \"#6E0000\",\n  //Orange Colors\n  Orange1: \"#EF9B42\",\n  Orange2: \"#E98435\",\n  Orange3: \"#DE4F1A\",\n  // Grayscale Palette\n  Black: \"#000000\",\n  Grey: \"#ADADAD\",\n  White: \"#FFFFFF\"\n};\n/**\n *\n * @name ColorContext\n * @description Our context to provide color themes\n * @see https://medium.com/@0n3z3r0n3/react-usecontext-how-to-update-context-from-child-component-8fa2894eee3d\n *\n */\n\n/**\n *\n * @name Palette\n * @description Global CSS Variables for palette\n *\n */\n\nexport const Palette = createGlobalStyle`\n  ::-moz-selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n  ::selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n\n  :root {\n    --clrPrimary: ${Color.Primary};\n    --clrSecondary: ${Color.Secondary};\n    --clrBackground: ${Color.Background};\n    --clrForeground: ${Color.Text};\n  }\n`; //////////////////////////////////////////////////////////////////////\n// End Component\n\nexport class ColorUtils {}\n\n_defineProperty(ColorUtils, \"SetThemeFromServer\", serverTheme => {\n  return createGlobalStyle`      \n      :root {\n        --clrPrimary: ${serverTheme.primary};\n        --clrSecondary: ${serverTheme.secondary};\n        --clrBackground: ${serverTheme.background};\n        --clrForeground: ${serverTheme.foreground};\n        --overlayMode: ${serverTheme.overlayMode};\n      }\n    `;\n});","map":null,"metadata":{},"sourceType":"module"}