{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React, { useContext } from \"react\";\nimport { DefaultTheme } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemeChangerWithHook = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemeChangerWithHook, _React$PureComponent);\n\n  var _super = _createSuper(ThemeChangerWithHook);\n\n  function ThemeChangerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeChangerWithHook);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      }\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n       let nextBodyElement = document.getElementById(\"__next\");\n       if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n       // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n     //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n\n  _createClass(ThemeChangerWithHook, [{\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      var setTheme = this.props.setTheme;\n      this.setState({\n        activeTheme: theme\n      });\n\n      if (\"object\") {\n        window.laxaltUniversalTheme = theme;\n        var nextBodyElement = document.getElementById(\"__next\");\n\n        if (nextBodyElement) {\n          nextBodyElement.setAttribute(\"data-theme\", theme.name);\n        }\n      }\n\n      setTheme(theme);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme;\n      var activeTheme = this.state.activeTheme; // const SetGlobalTheme = createGlobalStyle`\n      //   ${\n      //     activeTheme\n      //       ? CssUtils.CreateTheme(\n      //           activeTheme.primary,\n      //           activeTheme.secondary,\n      //           activeTheme.background,\n      //           activeTheme.foreground\n      //         )\n      //       : \"\"\n      //   }\n      // `;\n\n      return /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(ThemeChangerStyle, {\n          onMouseOver: function onMouseOver() {\n            return _this2.setNewTheme(theme);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.setNewTheme(DefaultTheme);\n          },\n          className: \"\"\n          /*`${ThemeChangerClassName}`*/\n          ,\n          children: children\n        })\n      });\n    }\n  }]);\n\n  return ThemeChangerWithHook;\n}(React.PureComponent);\nexport var ThemeChanger = function ThemeChanger(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children;\n\n  var _useContext = useContext(ColorContext),\n      setTheme = _useContext.setTheme;\n\n  return /*#__PURE__*/_jsx(ThemeChangerWithHook, {\n    theme: theme,\n    setTheme: setTheme,\n    children: children\n  });\n};","map":null,"metadata":{},"sourceType":"module"}