{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React from \"react\";\nimport { DefaultTheme } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorUtils } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport var ThemeChangerWithHook = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemeChangerWithHook, _React$PureComponent);\n\n  var _super = _createSuper(ThemeChangerWithHook);\n\n  function ThemeChangerWithHook(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeChangerWithHook);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      }\n    };\n    _this.setNewTheme = _this.setNewTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n       let nextBodyElement = document.getElementById(\"__next\");\n       if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n       // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n     //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n\n  _createClass(ThemeChangerWithHook, [{\n    key: \"setNewTheme\",\n    value: function setNewTheme(theme) {\n      var setTheme = this.props.setTheme;\n      this.setState({\n        activeTheme: theme\n      });\n\n      if (\"object\") {\n        window.laxaltUniversalTheme = theme;\n        var nextBodyElement = document.getElementById(\"__next\");\n\n        if (nextBodyElement) {\n          nextBodyElement.setAttribute(\"data-theme\", theme.name);\n        }\n      }\n\n      var SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n      setTheme(theme);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme;\n      var activeTheme = this.state.activeTheme; // const SetGlobalTheme = createGlobalStyle`\n      //   ${\n      //     activeTheme\n      //       ? CssUtils.CreateTheme(\n      //           activeTheme.primary,\n      //           activeTheme.secondary,\n      //           activeTheme.background,\n      //           activeTheme.foreground\n      //         )\n      //       : \"\"\n      //   }\n      // `;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ThemeChangerStyle, {\n          onMouseOver: function onMouseOver() {\n            return _this2.setNewTheme(theme);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.setNewTheme(DefaultTheme);\n          },\n          className: \"\"\n          /*`${ThemeChangerClassName}`*/\n          ,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    }\n  }]);\n\n  return ThemeChangerWithHook;\n}(React.PureComponent);\nexport var ThemeChanger = /*#__PURE__*/function (_React$PureComponent2) {\n  _inherits(ThemeChanger, _React$PureComponent2);\n\n  var _super2 = _createSuper(ThemeChanger);\n\n  function ThemeChanger(props) {\n    var _this3;\n\n    _classCallCheck(this, ThemeChanger);\n\n    _this3 = _super2.call(this, props);\n    _this3.state = {\n      active: false\n    };\n    _this3.removeTheme = _this3.removeTheme.bind(_assertThisInitialized(_this3));\n    _this3.addTheme = _this3.addTheme.bind(_assertThisInitialized(_this3));\n    return _this3;\n  }\n\n  _createClass(ThemeChanger, [{\n    key: \"removeTheme\",\n    value: function removeTheme() {\n      this.setState({\n        active: false\n      });\n    }\n  }, {\n    key: \"addTheme\",\n    value: function addTheme() {\n      this.setState({\n        active: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          theme = _this$props2.theme;\n      var active = this.state.active;\n      var HoverTheme = ColorUtils.SetThemeFromServer(theme);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseOver: function onMouseOver() {\n          return _this4.addTheme();\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this4.removeTheme();\n        },\n        children: [this.state.active && /*#__PURE__*/_jsxDEV(HoverTheme, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 32\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return ThemeChanger;\n}(React.PureComponent);\n;","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx"],"names":["React","DefaultTheme","ColorUtils","Theme","ThemeChangerStyle","ThemeChangerWithHook","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","setNewTheme","bind","theme","setTheme","setState","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","SecondTheme","SetThemeFromServer","OysterTheme","children","PureComponent","ThemeChanger","active","removeTheme","addTheme","HoverTheme"],"mappings":"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","sourcesContent":["// Core\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { DefaultTheme, LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, ColorUtils, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { ThemeChangerClassName, ThemeChangerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemeChanger = {\n  theme: LXLT_ColorTheme;\n};\n\ntype LXLT_ThemeChangerState = {\n  active: boolean;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemeChangerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemeChangerWithHook extends React.PureComponent<\n  LXLT_ThemeChanger,\n  LXLT_ThemeChangerState\n> {\n  constructor(props: LXLT_ThemeChanger) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  /*\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n  */\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    const SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { children, theme } = this.props;\n    let { activeTheme,  } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemeChangerStyle \n          onMouseOver={() => this.setNewTheme(theme)} \n          onMouseLeave={() => this.setNewTheme(DefaultTheme)} \n          className={\"\"/*`${ThemeChangerClassName}`*/}\n        >\n          {children}\n\n          {/*<div\n            className={`${ThemeChangerClassName}__option ${ThemeChangerClassName}__option--${\n              volume.theme.name === activeTheme.name\n                ? \"active\"\n                : \"inactive\"\n            }`}\n            style={{\n              backgroundColor: volume.theme.background,\n              border: `1px solid ${volume.theme.foreground}`,\n            }}\n          ></div>*/}\n        </ThemeChangerStyle>\n      </>\n      \n    );\n  }\n}\n\nexport class ThemeChanger extends React.PureComponent<\n  LXLT_ThemeChanger,\n  LXLT_ThemeChangerState\n> {\n  constructor(props: LXLT_ThemeChanger) {\n    super(props);\n\n    this.state = {\n      active: false,\n    };\n\n    this.removeTheme = this.removeTheme.bind(this);\n    this.addTheme = this.addTheme.bind(this);\n  }\n\n  removeTheme() {\n    this.setState({\n      active: false,\n    });\n  }\n\n  addTheme() {\n    this.setState({\n      active: true,\n    });\n  }\n\n\n\n  render() {\n    let { children, theme } = this.props;\n    let { active  } = this.state;\n    let HoverTheme = ColorUtils.SetThemeFromServer(theme);\n\n    return (\n      <div           \n        onMouseOver={() => this.addTheme()} \n        onMouseLeave={() => this.removeTheme()} \n      >\n        { this.state.active && <HoverTheme />}\n        {children}\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}