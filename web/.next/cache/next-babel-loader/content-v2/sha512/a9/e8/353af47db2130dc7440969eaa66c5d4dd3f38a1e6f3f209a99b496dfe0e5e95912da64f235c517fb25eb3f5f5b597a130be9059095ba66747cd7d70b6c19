{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alishagarric/Projects/react/volume/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React from \"react\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorUtils } from \"../../constants/styles/Color\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/*\n  const { setTheme } = this.props;\n\n  this.setState({\n    activeTheme: theme,\n  });\n\n  if (typeof window) {\n    window.laxaltUniversalTheme = theme;\n\n    let nextBodyElement = document.getElementById(\"__next\");\n\n    if (nextBodyElement) {\n      nextBodyElement.setAttribute(\"data-theme\", theme.name);\n    }\n  }\n\n  const SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n*/\nexport var ThemeChanger = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ThemeChanger, _React$PureComponent);\n\n  var _super = _createSuper(ThemeChanger);\n\n  function ThemeChanger(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeChanger);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      active: false\n    };\n    _this.removeTheme = _this.removeTheme.bind(_assertThisInitialized(_this));\n    _this.addTheme = _this.addTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ThemeChanger, [{\n    key: \"removeTheme\",\n    value: function removeTheme() {\n      this.setState({\n        active: false\n      });\n    }\n  }, {\n    key: \"addTheme\",\n    value: function addTheme() {\n      this.setState({\n        active: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          className = _this$props.className;\n      var active = this.state.active;\n      var HoverTheme = ColorUtils.SetThemeFromServer(theme);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        onMouseOver: function onMouseOver() {\n          return _this2.addTheme();\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.removeTheme();\n        },\n        className: \"\".concat(className ? className : \"\"),\n        children: [active && /*#__PURE__*/_jsxDEV(HoverTheme, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return ThemeChanger;\n}(React.PureComponent);\n;","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemeChanger/ThemeChanger.tsx"],"names":["React","ColorUtils","ThemeChanger","props","state","active","removeTheme","bind","addTheme","setState","children","theme","className","HoverTheme","SetThemeFromServer","PureComponent"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,UAAT,QAA4C,8BAA5C;AAqBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AAIE,wBAAYC,KAAZ,EAAsC;AAAA;;AAAA;;AACpC,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAIA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,+BAAhB;AARoC;AASrC;;AAbH;AAAA;AAAA,kCAegB;AACZ,WAAKE,QAAL,CAAc;AACZJ,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD;AAnBH;AAAA;AAAA,+BAqBa;AACT,WAAKI,QAAL,CAAc;AACZJ,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD;AAzBH;AAAA;AAAA,6BA6BW;AAAA;;AAAA,wBAC8B,KAAKF,KADnC;AAAA,UACDO,QADC,eACDA,QADC;AAAA,UACSC,KADT,eACSA,KADT;AAAA,UACgBC,SADhB,eACgBA,SADhB;AAAA,UAEDP,MAFC,GAEW,KAAKD,KAFhB,CAEDC,MAFC;AAGP,UAAIQ,UAAU,GAAGZ,UAAU,CAACa,kBAAX,CAA8BH,KAA9B,CAAjB;AAEA,0BACE;AACE,QAAA,WAAW,EAAE;AAAA,iBAAM,MAAI,CAACH,QAAL,EAAN;AAAA,SADf;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAI,CAACF,WAAL,EAAN;AAAA,SAFhB;AAGE,QAAA,SAAS,YAAKM,SAAS,GAAGA,SAAH,GAAe,EAA7B,CAHX;AAAA,mBAKIP,MAAM,iBAAI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBALd,EAMGK,QANH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;AA5CH;;AAAA;AAAA,EAAkCV,KAAK,CAACe,aAAxC;AA6CC","sourcesContent":["// Core\nimport React from \"react\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorUtils, LXLT_ColorTheme } from \"../../constants/styles/Color\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemeChanger = {\n  theme: LXLT_ColorTheme;\n  className?: string;\n};\n\ntype LXLT_ThemeChangerState = {\n  active: boolean;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/*\n  const { setTheme } = this.props;\n\n  this.setState({\n    activeTheme: theme,\n  });\n\n  if (typeof window) {\n    window.laxaltUniversalTheme = theme;\n\n    let nextBodyElement = document.getElementById(\"__next\");\n\n    if (nextBodyElement) {\n      nextBodyElement.setAttribute(\"data-theme\", theme.name);\n    }\n  }\n\n  const SecondTheme = ColorUtils.SetThemeFromServer(OysterTheme);\n*/\n\nexport class ThemeChanger extends React.PureComponent<\n  LXLT_ThemeChanger,\n  LXLT_ThemeChangerState\n> {\n  constructor(props: LXLT_ThemeChanger) {\n    super(props);\n\n    this.state = {\n      active: false,\n    };\n\n    this.removeTheme = this.removeTheme.bind(this);\n    this.addTheme = this.addTheme.bind(this);\n  }\n\n  removeTheme() {\n    this.setState({\n      active: false,\n    });\n  }\n\n  addTheme() {\n    this.setState({\n      active: true,\n    });\n  }\n\n\n\n  render() {\n    let { children, theme, className } = this.props;\n    let { active  } = this.state;\n    let HoverTheme = ColorUtils.SetThemeFromServer(theme);\n\n    return (\n      <li           \n        onMouseOver={() => this.addTheme()} \n        onMouseLeave={() => this.removeTheme()} \n        className={`${className ? className : \"\"}`}\n      >\n        { active && <HoverTheme />}\n        {children}\n      </li>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}