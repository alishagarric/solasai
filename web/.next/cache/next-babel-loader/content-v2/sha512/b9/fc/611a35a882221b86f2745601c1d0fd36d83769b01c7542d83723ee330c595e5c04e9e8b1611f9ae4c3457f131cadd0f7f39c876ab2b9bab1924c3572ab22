{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx\";\n// Core\nimport Link from \"next/link\";\nimport React, { useContext } from \"react\";\nimport { SiteVolumes } from \"../../constants/site/Settings\"; //import { __DEBUG__ } from \"../../constants/site/Settings\";\n\nimport { ColorContext } from \"../../constants/styles/Color\";\nimport { Theme } from \"../../constants/Theme\";\nimport { VolumesNavigationClassName } from \"../Sections/VolumesNavigation/styles.scss\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text\n      },\n      availableThemes: [{\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Primary\n      }]\n    };\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      } // _________________________\n      // Change if dark mode detected\n\n\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      } //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n\n    }\n  }\n\n  setNewTheme(theme) {\n    const {\n      setTheme\n    } = this.props;\n    this.setState({\n      activeTheme: theme\n    });\n\n    if (\"undefined\") {\n      window.laxaltUniversalTheme = theme;\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let {\n      activeTheme,\n      availableThemes\n    } = this.state; // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ThemePickerStyle, {\n        className: `${ThemePickerClassName} ${VolumesNavigationClassName}__volumes`,\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: `${VolumesNavigationClassName}__volumes__listings ${VolumesNavigationClassName}__volumes__listings--outline`,\n          children: SiteVolumes && SiteVolumes.length > 0 && SiteVolumes.map((volume, idx) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `${VolumesNavigationClassName}__volumes__listings__item\n                      ${ThemePickerClassName}__option ${ThemePickerClassName}__option--${volume.theme.name === activeTheme.name ? \"active\" : \"inactive\"}`,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                href: volume.link,\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: `${VolumesNavigationClassName}__volumes__listings__item__el`,\n                  onClick: () => this.setNewTheme(volume.theme),\n                  style: {\n                    backgroundColor: volume.theme.background,\n                    border: `1px solid ${volume.theme.foreground}`\n                  },\n                  children: volume.number\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: `${VolumesNavigationClassName}__volumes__listings ${VolumesNavigationClassName}__volumes__listings--solid`,\n          children: SiteVolumes.map((volume, idx) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `${VolumesNavigationClassName}__volumes__listings__item ${VolumesNavigationClassName}__volumes__listings__item--${idx + 1 === SiteVolumes.length ? \"is-active\" : \"is-inactive\"} `,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                href: volume.link,\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: `${VolumesNavigationClassName}__volumes__listings__item__el`,\n                  children: volume.number\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\nexport const ThemePicker = () => {\n  const {\n    setTheme\n  } = useContext(ColorContext);\n  return /*#__PURE__*/_jsxDEV(ThemePickerWithHook, {\n    setTheme: setTheme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/alishagarric/Projects/react/volume/web/components/ThemePicker/ThemePicker.tsx"],"names":["Link","React","useContext","SiteVolumes","ColorContext","Theme","VolumesNavigationClassName","ThemePickerClassName","ThemePickerStyle","ThemePickerWithHook","PureComponent","constructor","props","state","activeTheme","name","primary","Color","Primary","secondary","Secondary","background","Background","foreground","Text","availableThemes","setNewTheme","bind","componentDidMount","window","laxaltUniversalTheme","nextBodyElement","document","getElementById","setAttribute","matchMedia","matches","theme","setTheme","setState","render","length","map","volume","idx","link","backgroundColor","border","number","ThemePicker"],"mappings":"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","sourcesContent":["// Core\nimport Link from \"next/link\";\nimport React, { useContext } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { LMNTS_SiteVolume, Settings, SiteVolumes } from \"../../constants/site/Settings\";\n//import { __DEBUG__ } from \"../../constants/site/Settings\";\nimport { ColorContext, LXLT_ColorTheme } from \"../../constants/styles/Color\";\nimport { CssUtils } from \"../../constants/styles/CssUtils\";\nimport { Theme } from \"../../constants/Theme\";\nimport { VolumesNavigationClassName } from \"../Sections/VolumesNavigation/styles.scss\";\nimport { ThemePickerClassName, ThemePickerStyle } from \"./styles.scss\";\n\ndeclare global {\n  interface Window {\n    laxaltUniversalTheme: LXLT_ColorTheme;\n  }\n}\n\n\n// Begin Types\n// __________________________________________________________________________________________\n\ntype LXLT_ThemePicker = {\n  setTheme: (theme: LXLT_ColorTheme) => void;\n};\n\n// type LXLT_Theme = {\n// name: \"default\" | \"white\" | \"goldenrod\" | \"cadetblue\" | \"orangered\" | \"galaxy\";\n//   primary: string;\n//   secondary: string;\n//   background: string;\n//   foreground: string;\n// };\n\ntype LXLT_ThemePickerState = {\n  availableThemes: LXLT_ColorTheme[];\n  activeTheme?: LXLT_ColorTheme;\n};\n\n// Begin Component\n// __________________________________________________________________________________________\n\n/**\n * @name ThemePickerWithHook\n * @author Peter Laxalt\n *\n */\nexport class ThemePickerWithHook extends React.PureComponent<\n  LXLT_ThemePicker,\n  LXLT_ThemePickerState\n> {\n  constructor(props: LXLT_ThemePicker) {\n    super(props);\n\n    this.state = {\n      activeTheme: {\n        name: \"default\",\n        primary: Theme.Color.Primary,\n        secondary: Theme.Color.Secondary,\n        background: Theme.Color.Background,\n        foreground: Theme.Color.Text,\n      },\n      availableThemes: [\n        {\n          name: \"default\",\n          primary: Theme.Color.Primary,\n          secondary: Theme.Color.Secondary,\n          background: Theme.Color.Background,\n          foreground: Theme.Color.Primary,\n        },\n      ],\n    };\n\n    this.setNewTheme = this.setNewTheme.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window) {\n      window.laxaltUniversalTheme = this.state.activeTheme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", this.state.activeTheme.name);\n      }\n\n      // _________________________\n      // Change if dark mode detected\n      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        this.setNewTheme(this.state.availableThemes[0]); //TODO: change this to fig\n      }\n\n    //  __DEBUG__ && console.log(\"ðŸŽ¨ theme set\", window.laxaltUniversalTheme);\n    }\n  }\n\n  setNewTheme(theme: LXLT_ColorTheme) {\n    const { setTheme } = this.props;\n\n    this.setState({\n      activeTheme: theme,\n    });\n\n    if (typeof window) {\n      window.laxaltUniversalTheme = theme;\n\n      let nextBodyElement = document.getElementById(\"__next\");\n\n      if (nextBodyElement) {\n        nextBodyElement.setAttribute(\"data-theme\", theme.name);\n      }\n    }\n\n    setTheme(theme);\n  }\n\n  render() {\n    let { activeTheme, availableThemes } = this.state;\n\n    // const SetGlobalTheme = createGlobalStyle`\n    //   ${\n    //     activeTheme\n    //       ? CssUtils.CreateTheme(\n    //           activeTheme.primary,\n    //           activeTheme.secondary,\n    //           activeTheme.background,\n    //           activeTheme.foreground\n    //         )\n    //       : \"\"\n    //   }\n    // `;\n\n    return (\n      <>\n        {/* {activeTheme && activeTheme.name !== \"default\" ? (\n          <SetGlobalTheme />\n        ) : null} */}\n        <ThemePickerStyle className={`${ThemePickerClassName} ${VolumesNavigationClassName}__volumes`}>\n\n          <ul className={`${VolumesNavigationClassName}__volumes__listings ${VolumesNavigationClassName}__volumes__listings--outline`}>\n            {SiteVolumes && SiteVolumes.length > 0 &&\n              SiteVolumes.map((volume, idx: number) => {\n                return (\n                  <li\n                    className={`${VolumesNavigationClassName}__volumes__listings__item\n                      ${ThemePickerClassName}__option ${ThemePickerClassName}__option--${\n                      volume.theme.name === activeTheme.name\n                        ? \"active\"\n                        : \"inactive\"\n                    }`}\n                    \n                    key={idx}\n                  >\n\n                    <Link href={volume.link}>\n                      <a\n                        className={`${VolumesNavigationClassName}__volumes__listings__item__el`}\n                        onClick={() => this.setNewTheme(volume.theme)}\n                        style={{\n                          backgroundColor: volume.theme.background,\n                          border: `1px solid ${volume.theme.foreground}`,\n                        }}\n                      >\n                        {volume.number}\n                      </a>\n                    </Link>\n                  </li>\n                );\n              })\n            }\n          </ul>\n\n          {/* ________________________________________ */}\n          {/* Solid Text */}\n          <ul\n            className={`${VolumesNavigationClassName}__volumes__listings ${VolumesNavigationClassName}__volumes__listings--solid`}\n          >\n            {SiteVolumes.map((volume: LMNTS_SiteVolume, idx: number) => {\n              return (\n                <li\n                  key={idx}\n                  className={`${VolumesNavigationClassName}__volumes__listings__item ${VolumesNavigationClassName}__volumes__listings__item--${\n                    idx + 1 === SiteVolumes.length ? \"is-active\" : \"is-inactive\"\n                  } `}\n                >\n                  <Link href={volume.link}>\n                    <a\n                      className={`${VolumesNavigationClassName}__volumes__listings__item__el`}\n                    >\n                      {volume.number}\n                    </a>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </ThemePickerStyle>\n      </>\n    );\n  }\n}\n\nexport const ThemePicker: React.FunctionComponent = () => {\n  const { setTheme } = useContext(ColorContext);\n\n  return <ThemePickerWithHook setTheme={setTheme} />;\n};\n"]},"metadata":{},"sourceType":"module"}