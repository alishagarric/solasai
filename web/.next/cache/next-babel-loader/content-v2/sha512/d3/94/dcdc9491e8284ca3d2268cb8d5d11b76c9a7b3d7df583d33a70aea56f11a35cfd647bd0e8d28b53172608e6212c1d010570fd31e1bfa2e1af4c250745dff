{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// Core\nimport React from \"react\";\nimport LazyLoad from \"vanilla-lazyload\"; // Begin Component\n// __________________________________________________________________________________________\n\n/**\n *\n * LazyImage.tsx\n * @author Peter Laxalt\n * @description Lazy loaded image component.\n *\n */\nexport var LazyImage = /*#__PURE__*/function (_React$Component) {\n  _inherits(LazyImage, _React$Component);\n\n  var _super = _createSuper(LazyImage);\n\n  function LazyImage() {\n    _classCallCheck(this, LazyImage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LazyImage, [{\n    key: \"componentDidMount\",\n    // Update lazyLoad after first rendering of every image\n    value: function componentDidMount() {\n      // @ts-ignore\n      if (!document.lazyLoadInstance) {\n        // @ts-ignore\n        document.lazyLoadInstance = new LazyLoad({\n          elements_selector: \".lazy\"\n        });\n      } // @ts-ignore\n\n\n      document.lazyLoadInstance.update();\n    } // Update lazyLoad after rerendering of every image\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // @ts-ignore\n      document.lazyLoadInstance.update();\n    } // Just render the image with data-src\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // @ts-ignore\n      var _this$props = this.props,\n          alt = _this$props.alt,\n          src = _this$props.src,\n          srcset = _this$props.srcset,\n          sizes = _this$props.sizes,\n          width = _this$props.width,\n          height = _this$props.height,\n          aspectRatio = _this$props.aspectRatio,\n          style = _this$props.style,\n          addClass = _this$props.addClass;\n      return /*#__PURE__*/_jsx(\"img\", {\n        alt: alt,\n        className: \"lazy \".concat(addClass ? addClass : \"\"),\n        \"data-src\": src,\n        \"data-srcset\": srcset,\n        \"data-sizes\": sizes,\n        width: width,\n        height: height,\n        style: style,\n        \"data-aspect-ratio\": aspectRatio\n      });\n    }\n  }]);\n\n  return LazyImage;\n}(React.Component);\nexport default LazyImage;","map":null,"metadata":{},"sourceType":"module"}