{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Color.js:\n// This is the sitewide palette.\n// Imports\n// _______________________________________________________\nimport { createGlobalStyle } from \"styled-components\"; // Begin Component\n// _______________________________________________________\n\nexport const Color = {\n  // Color Variables\n  varPrimary: \"var(--clrPrimary)\",\n  varSecondary: \"var(--clrSecondary)\",\n  varBackground: \"var(--clrBackground)\",\n  varForeground: \"var(--clrForeground)\",\n  // Core Colors\n  Primary: \"#112635\",\n  Secondary: \"#D41D00\",\n  Background: \"#F7F7F7\",\n  Text: \"#112635\",\n  // Grayscale Palette\n  Black: \"#000000\",\n  White: \"#FFF6EE\"\n};\n/**\n *\n * @name ColorContext\n * @description Our context to provide color themes\n * @see https://medium.com/@0n3z3r0n3/react-usecontext-how-to-update-context-from-child-component-8fa2894eee3d\n *\n */\n\n/**\n *\n * @name Palette\n * @description Global CSS Variables for palette\n *\n */\n\nexport const Palette = createGlobalStyle`\n  ::-moz-selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n  ::selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n\n  :root {\n    --clrPrimary: ${Color.Primary};\n    --clrSecondary: ${Color.Secondary};\n    --clrBackground: ${Color.Background};\n    --clrForeground: ${Color.Text};\n  }\n`; //////////////////////////////////////////////////////////////////////\n// End Component\n\nexport class ColorUtils {}\n\n_defineProperty(ColorUtils, \"SetThemeFromServer\", serverTheme => {\n  return createGlobalStyle`      \n      :root {\n        --clrPrimary: ${serverTheme.primary};\n        --clrSecondary: ${serverTheme.secondary};\n        --clrBackground: ${serverTheme.background};\n        --clrForeground: ${serverTheme.foreground};\n        --overlayMode: ${serverTheme.overlayMode};\n      }\n    `;\n});","map":{"version":3,"sources":["/Users/alishagarric/Projects/side-projects/solas/web/constants/styles/Color.tsx"],"names":["createGlobalStyle","Color","varPrimary","varSecondary","varBackground","varForeground","Primary","Secondary","Background","Text","Black","White","Palette","ColorUtils","serverTheme","primary","secondary","background","foreground","overlayMode"],"mappings":";;AAAA;AACA;AAEA;AACA;AAGA,SAASA,iBAAT,QAAuC,mBAAvC,C,CAEA;AACA;;AAcA,OAAO,MAAMC,KAAK,GAAG;AACnB;AACAC,EAAAA,UAAU,EAAE,mBAFO;AAGnBC,EAAAA,YAAY,EAAE,qBAHK;AAInBC,EAAAA,aAAa,EAAE,sBAJI;AAKnBC,EAAAA,aAAa,EAAE,sBALI;AAOnB;AACAC,EAAAA,OAAO,EAAE,SARU;AASnBC,EAAAA,SAAS,EAAE,SATQ;AAUnBC,EAAAA,UAAU,EAAE,SAVO;AAWnBC,EAAAA,IAAI,EAAE,SAXa;AAanB;AACAC,EAAAA,KAAK,EAAE,SAdY;AAenBC,EAAAA,KAAK,EAAE;AAfY,CAAd;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAGZ,iBAAkB;AACzC,mCAAmCC,KAAK,CAACI,aAAc,YAAWJ,KAAK,CAACG,aAAc;AACtF,8BAA8BH,KAAK,CAACI,aAAc,YAAWJ,KAAK,CAACG,aAAc;AACjF;AACA;AACA,oBAAoBH,KAAK,CAACK,OAAQ;AAClC,sBAAsBL,KAAK,CAACM,SAAU;AACtC,uBAAuBN,KAAK,CAACO,UAAW;AACxC,uBAAuBP,KAAK,CAACQ,IAAK;AAClC;AACA,CAVO,C,CAYP;AACA;;AAGA,OAAO,MAAMI,UAAN,CAAiB;;gBAAXA,U,wBAEkBC,WAAD,IAA6B;AACvD,SAAOd,iBAAkB;AAC7B;AACA,wBAAwBc,WAAW,CAACC,OAAQ;AAC5C,0BAA0BD,WAAW,CAACE,SAAU;AAChD,2BAA2BF,WAAW,CAACG,UAAW;AAClD,2BAA2BH,WAAW,CAACI,UAAW;AAClD,yBAAyBJ,WAAW,CAACK,WAAY;AACjD;AACA,KARI;AASD,C","sourcesContent":["// Color.js:\n// This is the sitewide palette.\n\n// Imports\n// _______________________________________________________\n\nimport React from \"react\";\nimport { createGlobalStyle, css } from \"styled-components\";\n\n// Begin Component\n// _______________________________________________________\n\nexport type ColorTheme = {\n  name?:\n    | \"default\"\n    | \"alternate\";\n  primary: string;\n  secondary: string;\n  background: string;\n  foreground: string;\n  overlayMode: string;\n  setTheme?: (theme: ColorTheme) => void;\n};\n\nexport const Color = {\n  // Color Variables\n  varPrimary: \"var(--clrPrimary)\",\n  varSecondary: \"var(--clrSecondary)\",\n  varBackground: \"var(--clrBackground)\",\n  varForeground: \"var(--clrForeground)\",\n\n  // Core Colors\n  Primary: \"#112635\",\n  Secondary: \"#D41D00\",\n  Background: \"#F7F7F7\",\n  Text: \"#112635\",\n\n  // Grayscale Palette\n  Black: \"#000000\",\n  White: \"#FFF6EE\",\n\n};\n\n\n/**\n *\n * @name ColorContext\n * @description Our context to provide color themes\n * @see https://medium.com/@0n3z3r0n3/react-usecontext-how-to-update-context-from-child-component-8fa2894eee3d\n *\n */\n\n/**\n *\n * @name Palette\n * @description Global CSS Variables for palette\n *\n */\nexport const Palette = createGlobalStyle`\n  ::-moz-selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n  ::selection { background: ${Color.varForeground}; color: ${Color.varBackground} }\n\n  :root {\n    --clrPrimary: ${Color.Primary};\n    --clrSecondary: ${Color.Secondary};\n    --clrBackground: ${Color.Background};\n    --clrForeground: ${Color.Text};\n  }\n`;\n\n//////////////////////////////////////////////////////////////////////\n// End Component\n\n\nexport class ColorUtils {\n\n  static SetThemeFromServer = (serverTheme: ColorTheme) => {\n    return createGlobalStyle`      \n      :root {\n        --clrPrimary: ${serverTheme.primary};\n        --clrSecondary: ${serverTheme.secondary};\n        --clrBackground: ${serverTheme.background};\n        --clrForeground: ${serverTheme.foreground};\n        --overlayMode: ${serverTheme.overlayMode};\n      }\n    `;\n  }\n}"]},"metadata":{},"sourceType":"module"}